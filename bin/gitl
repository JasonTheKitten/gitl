#!/bin/luajit
-- Some environments do not have /usr/bin/env, so we just specify the direct path

local originalEnv = {}
for k, v in pairs(_ENV or _G) do
  originalEnv[k] = v
end

local cache = {}
local localRequire
function localRequire(name)
  if cache[name] then
    return cache[name]
  end

  local scriptPath, scriptDir
  if originalEnv.PROGRAM_LOCATION then
    scriptDir = _ENV.PROGRAM_LOCATION
  else
    scriptPath = debug.getinfo(1, "S").source:sub(2)
    scriptDir = (scriptPath:match("(.*/)") or "./") .. "../"
  end

  local env = {}
  for k, v in pairs(originalEnv) do
    env[k] = v
  end
  env.localRequire = localRequire

  local loadName = name
  if loadName == "driver" then
    if originalEnv.DRIVER_NAME then
      loadName = "drivers/" .. _ENV.DRIVER_NAME
    else
      loadName = "drivers/driver_puc"
    end
  end
  
  local ok, err = loadfile(scriptDir .. loadName .. ".lua", "t", env)
  if not ok then
    error(err)
  end

  local result = ok()
  cache[name] = result
  return result
end

--

local driver = localRequire("driver")
local timings = localRequire("lib/timings")
local getopts = localRequire("lib/getopts")
local gitconfig = localRequire("lib/gitl/gitconfig")

local filesystem = driver.filesystem

local optionsSpec, subcommands = {}, {}
for _, file in ipairs(filesystem.list(filesystem.combine(filesystem.codeDir(), "commands"))) do
  local command = file:match("(.*)%.lua$")
  if command then
    local commandSpec = localRequire("commands/" .. command)
    if commandSpec then
      optionsSpec[command] = commandSpec
    end
    subcommands[command] = commandSpec.run
  end
end

optionsSpec.help = { flag = "help", short = "h", description = "Display this help message" }
optionsSpec.timings = { flag = "timings", description = "Display timing information (for profiling)" }
optionsSpec.config2 = {
  flag = "configuration", short = "c", description = "Specify a configuration value", params = "<name>=<value>",
  multiple = getopts.stop.times(1)
}
optionsSpec.config3 = {
  flag = "configuration-file", short = "C", description = "Specify a configuration file", params = "<file>",
  multiple = getopts.stop.times(1)
}

local options = getopts.options(optionsSpec)
local ok, results = getopts.parse(options, { ... }, {
  argumentPreprocessor = getopts.argumentPreprocessors.detect,
  delimiter = "-%",
  commandKey = "command",
  requireSubcommand = false
})

if not ok then
  print(results)
end
if ok and (not results.command) and not (results.help) then
  print("gitl requires a subcommand!")
end
if results.help or (ok and not results.command) then
  local longMessageDisplayHandle = driver.openLongMessageDisplay()
  if results.help and not results.command then
    longMessageDisplayHandle:write("Welcome to gitl, a git-based VCS for ComputerCraft, OpenComputers, and PUC Lua!\n")
  end
  longMessageDisplayHandle:write(getopts.generateHelpMessage(options))
  longMessageDisplayHandle:close()
end
if not (ok and results.command) then
  return
end

if results.timings then
  timings.enableTimings("encodeZlib", 100)
  timings.enableTimings("decodeZlib", 100)
  timings.enableTimings("applyDelta", 100)
end

if results.config2 then
  local key, value = results.config2.arguments[1]:match("^(.-)=(.*)$")
  if not key then
    print("Invalid configuration value")
    return
  end
  gitconfig.set(nil, key, value, { gitconfig.getSessionConfig() })
end
if results.config3 then
  local file = results.config3.arguments[1]
  gitconfig.loadDefaultConfig(file)
end

local myCommand = subcommands[results.command]
myCommand(results[results.command])
